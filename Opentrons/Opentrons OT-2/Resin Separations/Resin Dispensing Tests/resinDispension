"""
Author: Brison Cowan
Description:

This protocol is to test resin transfer capabilities in solution using an Opentrons OT-2.
"""

from opentrons import protocol_api

metadata = {
    'apiLevel': '2.18',
    'protocolName': 'ResinTest_OpentronsOT2',
    'author': "Brison Cowan",
    'description': 'Testing Resin Transfer in Solution',
    }

def add_parameters(parameters: protocol_api.Parameters):
    # This function
    parameters.add_int(variable_name='lowest_depth', display_name='Lowest depth (mm)',
                       description='The lowest depth to aspirate from', default=10, minimum=0, maximum=100)
    parameters.add_int(variable_name='middle_depth', display_name='Middle depth (mm)',
                       description='The middle depth to aspirate from', default=25, minimum=0, maximum=100)
    parameters.add_int(variable_name='volume_for_transfer', display_name='Volume for transfer (uL)',
                       description='Volume to transfer from source tube to collection tube', default=100,
                       minimum=0, maximum=1000)
    parameters.add_int(variable_name='volume_for_mixing', display_name='Volume for mixing (uL)',
                       description='Volume to mix in the source tube', default=500, minimum=0, maximum=1000)
    parameters.add_int(variable_name='number_of_mixes', display_name='Number of mixes',
                       description='Number of times to mix the source tube', default=3, minimum=1, maximum=10)

def run(protocol: protocol_api.ProtocolContext):
    # labware
    tiprack = protocol.load_labware('opentrons_96_tiprack_1000ul', 4)
    tuberack1 = protocol.load_labware('opentrons_6_tuberack_falcon_50ml_conical', 1)
    tuberack2 = protocol.load_labware('opentrons_15_tuberack_falcon_15ml_conical', 2)

    # pipettes
    pipette = protocol.load_instrument('p1000_single_gen2', 'left', tip_racks=[tiprack])

    # resin mixture well
    input = tuberack1.wells()[0]

    # output well
    output1 = tuberack2.wells()[0]
    output2 = tuberack2.wells()[1]
    output3 = tuberack2.wells()[2]

    output_wells = [output1, output2, output3]

    ####################################################################
    
    # Parameters
    lowest_depth = protocol.params.lowest_depth
    middle_depth = protocol.params.middle_depth
    volume_for_transfer = protocol.params.volume_for_transfer
    volume_for_mixing = protocol.params.volume_for_mixing
    number_of_mixes = protocol.params.number_of_mixes

    # Pick up the pipette tip
    pipette.pick_up_tip()

    for tube in output_wells:
    source_tube = input  # The source tube is the input tube for all transfers
    tube = output_wells[i]

        # Mix the solution in the input, deep in the well
        pipette_name.move_to(source_tube.bottom(lowest_depth))  # Move to the lowest part of the well
        pipette_name.mix(number_of_mixes, volume_for_mixing)  # mix

        # Transfer from input to output
        pipette_name.aspirate(volume_for_transfer, source_tube.bottom(middle_depth))  # a little above the bottom of the well
        pipette_name.dispense(volume_for_transfer, tube.bottom(lowest_depth))  # at the bottom of the well
        pipette_name.blow_out(tube.top())
    
    # Dump the pipette tip
    pipette_name.drop_tip()